version: '3.8'

services:
  backend:
    image: ghcr.io/sudipta26889/dharas-local-ai-backend:latest
    container_name: dharas-ai-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      - POSTGRES_HOST=${POSTGRES_HOST:-192.168.11.100}
      - POSTGRES_PORT=${POSTGRES_PORT:-15432}
      - POSTGRES_DB=${POSTGRES_DB:-dharas_chat_db}
      - POSTGRES_USER=${POSTGRES_USER:-dharas_chat_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-RbmTbkEpPERXlaIMudu5}
      
      # Redis Configuration
      - REDIS_HOST=${REDIS_HOST:-192.168.11.100}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Qdrant Configuration
      - QDRANT_HOST=${QDRANT_HOST:-192.168.11.100}
      - QDRANT_PORT=${QDRANT_PORT:-6333}
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
      - QDRANT_COLLECTION_NAME=${QDRANT_COLLECTION_NAME:-dharas_chat_embeddings}
      
      # MinIO Configuration
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-192.168.11.100:7612}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-zUd8Su6vsdjbkFf2uiXrtScH}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-dharas-chat-attachments}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      
      # LLM Configuration
      - LLM_ENDPOINTS=${LLM_ENDPOINTS:-http://192.168.11.108:11434}
      - DEFAULT_MODEL=${DEFAULT_MODEL:-qwen2.5:32b-instruct}
      - MODEL_TIMEOUT=${MODEL_TIMEOUT:-600}
      - STREAMING_TIMEOUT=${STREAMING_TIMEOUT:-900}
      
      # LDAP Configuration
      - LDAP_ENABLED=${LDAP_ENABLED:-true}
      - LDAP_SERVER=${LDAP_SERVER:-sudipta.synology.me}
      - LDAP_PORT=${LDAP_PORT:-389}
      - LDAP_USE_SSL=${LDAP_USE_SSL:-false}
      - LDAP_START_TLS=${LDAP_START_TLS:-true}
      - LDAP_BIND_DN=${LDAP_BIND_DN:-uid=root,cn=users,dc=sudipta,dc=synology,dc=me}
      - LDAP_BIND_PASSWORD=${LDAP_BIND_PASSWORD:-2RBmWYded2X9zYY}
      - LDAP_BASE_DN=${LDAP_BASE_DN:-dc=sudipta,dc=synology,dc=me}
      - LDAP_USER_DN_TEMPLATE=${LDAP_USER_DN_TEMPLATE:-uid={username},cn=users,dc=sudipta,dc=synology,dc=me}
      - LDAP_USER_SEARCH_BASE=${LDAP_USER_SEARCH_BASE:-cn=users,dc=sudipta,dc=synology,dc=me}
      - LDAP_USER_FILTER=${LDAP_USER_FILTER:-(objectClass=inetOrgPerson)}
      - LDAP_USER_ATTR_EMAIL=${LDAP_USER_ATTR_EMAIL:-mail}
      - LDAP_USER_ATTR_NAME=${LDAP_USER_ATTR_NAME:-displayName}
      - LDAP_USER_ATTR_UID=${LDAP_USER_ATTR_UID:-uid}
      - LDAP_CONNECTION_TIMEOUT=${LDAP_CONNECTION_TIMEOUT:-5}
      - LDAP_AUTO_CREATE_USER=${LDAP_AUTO_CREATE_USER:-true}
      - LDAP_IGNORE_TLS_ERRORS=${LDAP_IGNORE_TLS_ERRORS:-true}
      
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.a2f7e8d9c0b1a2d3e4f5g6h7i8j9k0l1}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS:-720}
      - JWT_REFRESH_EXPIRATION_HOURS=${JWT_REFRESH_EXPIRATION_HOURS:-2160}
      
      # Application Configuration
      - BACKEND_PORT=${BACKEND_PORT:-8000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5775,http://192.168.11.100:5775,https://chat.sudiptadhara.in}
      
      # Embeddings Configuration
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-nomic-embed-text}
      - EMBEDDING_DIMENSION=${EMBEDDING_DIMENSION:-768}
    
    networks:
      - dharas-network
    
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    depends_on:
      - db-init
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dharas-ai-backend.rule=Host(`chat.sudiptadhara.in`) && PathPrefix(`/api`, `/ws`)"
      - "traefik.http.services.dharas-ai-backend.loadbalancer.server.port=8000"

  frontend:
    image: ghcr.io/sudipta26889/dharas-local-ai-frontend:latest
    container_name: dharas-ai-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5775/api}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:5775/ws}
    
    networks:
      - dharas-network
    
    depends_on:
      backend:
        condition: service_healthy

  nginx:
    image: ghcr.io/sudipta26889/dharas-local-ai-nginx:latest
    container_name: dharas-ai-nginx
    restart: unless-stopped
    ports:
      - "${EXTERNAL_PORT:-5775}:80"
    
    networks:
      - dharas-network
    
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dharas-ai.rule=Host(`chat.sudiptadhara.in`)"
      - "traefik.http.services.dharas-ai.loadbalancer.server.port=80"

  # Database initialization service (runs once)
  db-init:
    image: ghcr.io/sudipta26889/dharas-local-ai-backend:latest
    container_name: dharas-ai-db-init
    restart: "no"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-192.168.11.100}
      - POSTGRES_PORT=${POSTGRES_PORT:-15432}
      - POSTGRES_DB=${POSTGRES_DB:-dharas_chat_db}
      - POSTGRES_USER=${POSTGRES_USER:-dharas_chat_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-RbmTbkEpPERXlaIMudu5}
    
    command: |
      sh -c '
        echo "Waiting for database to be ready..."
        until python -c "
        import asyncio
        import asyncpg
        import os
        
        async def check_db():
            try:
                conn = await asyncpg.connect(
                    host=os.getenv(\"POSTGRES_HOST\"),
                    port=int(os.getenv(\"POSTGRES_PORT\")),
                    database=os.getenv(\"POSTGRES_DB\"),
                    user=os.getenv(\"POSTGRES_USER\"),
                    password=os.getenv(\"POSTGRES_PASSWORD\")
                )
                await conn.close()
                print(\"Database is ready!\")
                return True
            except Exception as e:
                print(f\"Database not ready: {e}\")
                return False
        
        asyncio.run(check_db())
        "; do
          echo "Database not ready, waiting..."
          sleep 5
        done
        
        echo "Running database migrations..."
        cd /app && alembic upgrade head
        echo "Database initialization completed!"
      '
    
    networks:
      - dharas-network
    
    profiles:
      - init

networks:
  dharas-network:
    driver: bridge

# Optional: Volume definitions for persistent data
volumes:
  backend-cache:
    driver: local
  frontend-cache:
    driver: local