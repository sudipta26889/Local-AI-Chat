version: '3.8'

# Production-ready stack for Docker Swarm on Synology NAS
# Optimized for low memory usage

services:
  backend:
    image: ghcr.io/sudipta26889/dharas-local-ai-backend:latest
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    environment:
      # Database Configuration (External PostgreSQL)
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # Redis Configuration (External Redis)
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Qdrant Configuration (External Vector DB)
      - QDRANT_HOST=${QDRANT_HOST}
      - QDRANT_PORT=${QDRANT_PORT}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - QDRANT_COLLECTION_NAME=${QDRANT_COLLECTION_NAME}
      
      # MinIO Configuration (External Object Storage)
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - MINIO_SECURE=${MINIO_SECURE}
      
      # LLM Services Configuration
      - LLM_SERVICES=${LLM_SERVICES}
      - DEFAULT_LLM_SERVICE=${DEFAULT_LLM_SERVICE}
      - MODEL_TIMEOUT=${MODEL_TIMEOUT}
      - STREAMING_TIMEOUT=${STREAMING_TIMEOUT}
      
      # LDAP Configuration (Synology Directory Server)
      - LDAP_ENABLED=${LDAP_ENABLED}
      - LDAP_SERVER=${LDAP_SERVER}
      - LDAP_PORT=${LDAP_PORT}
      - LDAP_USE_SSL=${LDAP_USE_SSL}
      - LDAP_START_TLS=${LDAP_START_TLS}
      - LDAP_BIND_DN=${LDAP_BIND_DN}
      - LDAP_BIND_PASSWORD=${LDAP_BIND_PASSWORD}
      - LDAP_BASE_DN=${LDAP_BASE_DN}
      - LDAP_USER_DN_TEMPLATE=${LDAP_USER_DN_TEMPLATE}
      - LDAP_USER_SEARCH_BASE=${LDAP_USER_SEARCH_BASE}
      - LDAP_USER_FILTER=${LDAP_USER_FILTER}
      - LDAP_USER_ATTR_EMAIL=${LDAP_USER_ATTR_EMAIL}
      - LDAP_USER_ATTR_NAME=${LDAP_USER_ATTR_NAME}
      - LDAP_USER_ATTR_UID=${LDAP_USER_ATTR_UID}
      - LDAP_CONNECTION_TIMEOUT=${LDAP_CONNECTION_TIMEOUT}
      - LDAP_AUTO_CREATE_USER=${LDAP_AUTO_CREATE_USER}
      - LDAP_IGNORE_TLS_ERRORS=${LDAP_IGNORE_TLS_ERRORS}
      
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS}
      - JWT_REFRESH_EXPIRATION_HOURS=${JWT_REFRESH_EXPIRATION_HOURS}
      
      # Application Configuration
      - BACKEND_PORT=${BACKEND_PORT}
      - LOG_LEVEL=${LOG_LEVEL}
      - CORS_ORIGINS=${CORS_ORIGINS}
      
      # Embeddings Configuration
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - EMBEDDING_DIMENSION=${EMBEDDING_DIMENSION}
    
    networks:
      - dharas-network
    
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]
    
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8000/health')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: ghcr.io/sudipta26889/dharas-local-ai-nginx:latest
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.25'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M
    ports:
      - "5775:80"
    
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL}
    
    networks:
      - dharas-network
    
    depends_on:
      - backend
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  dharas-network:
    driver: overlay
    attachable: true

# Deployment Notes:
# 1. This stack is optimized for Docker Swarm with resource limits
#    - Backend: 256MB RAM limit
#    - Nginx: 64MB RAM limit (serves both API proxy and React app)
#    - Total: ~320MB RAM usage
#
# 2. IMPORTANT: Create a stack.env file with all environment variables
#    Copy stack.env.example to stack.env and update with your values
#    In Portainer: Go to "Environment variables" tab and load from file
#
# 3. Ensure external services are running:
#    - PostgreSQL
#    - Redis  
#    - Qdrant
#    - MinIO
#    - LM Studio/Ollama
#    - Synology Directory Server
#
# 4. Run database migrations first:
#    docker run --rm --network dharas-network \
#      --env-file stack.env \
#      ghcr.io/sudipta26889/dharas-local-ai-backend:latest \
#      sh -c "cd /app && alembic upgrade head"
#
# 5. Deploy with Portainer:
#    - Upload this file as a stack
#    - Load environment variables from stack.env
#    - Or deploy with: docker stack deploy -c portainer-stack.yml dharas-ai
#
# 6. Access the application at: http://[NAS_IP]:5775
# 7. HTTPS access: Configure your domain
# 8. Monitor with: docker service ls