# Multi-stage build for production nginx with React app
# Stage 1: Build React app
FROM node:18-alpine as frontend-build

WORKDIR /app

# Copy frontend package files
COPY frontend/package.json ./
RUN npm install --production=false

# Copy frontend source
COPY frontend/ ./

# Build production React app with proper API URLs
ARG REACT_APP_API_URL=/api
ARG REACT_APP_WS_URL=/ws
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV REACT_APP_WS_URL=$REACT_APP_WS_URL

RUN npm run build

# Stage 2: Production nginx
FROM nginx:alpine

# Remove default nginx config
RUN rm /etc/nginx/conf.d/default.conf

# Copy custom nginx config for production
COPY nginx/nginx.production.conf /etc/nginx/nginx.conf

# Copy built React app from build stage
COPY --from=frontend-build /app/build /usr/share/nginx/html

# Add health check endpoint
RUN echo "OK" > /usr/share/nginx/html/health

# Create non-root user
RUN adduser -D -H -u 1000 -s /sbin/nologin nginx-user

# Set ownership
RUN chown -R nginx-user:nginx-user /usr/share/nginx/html \
    && chown -R nginx-user:nginx-user /var/cache/nginx \
    && chown -R nginx-user:nginx-user /var/log/nginx \
    && touch /var/run/nginx.pid \
    && chown -R nginx-user:nginx-user /var/run/nginx.pid

# Switch to non-root user
USER nginx-user

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:80/health || exit 1

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]